--- arch/Linux-x86-64-intel.psmp.orig	2021-12-31 10:25:44.499215100 +0100
+++ arch/Linux-x86-64-intel.psmp	2022-05-30 13:32:54.233797796 +0200
@@ -1,284 +1,68 @@
-#!/bin/bash
-#
-# CP2K (Intel/MKL) arch file for the Merlin cluster (PSI)
-#
-# Tested with: Intel 21.4, Intel MPI, Intel MKL, GSL 2.7,
-#              LIBINT 2.6.0, LIBXC 5.1.7, ELPA 2021.11.001,
-#              PLUMED 2.7.3, SPGLIB 1.16.2, LIBVORI 210412,
-#              COSMA 2.5.1, SIRIUS 7.3.0
-#
-# Usage: Source this arch file and then run make as instructed.
-#        The compiler version can be specified as argument.
-#        Otherwise a CP2K toolchain installation is expected as default,
-#        which can be created by running in advance
-#        > cd tools/toolchain
-#        > ./install_cp2k_toolchain.sh --with-intelmpi=system --with-mkl=system --with-plumed
-#
-# Author: Matthias Krack (matthias.krack@psi.ch, PSI, December 2021)
-#
-# \
-   if [[ "${0}" == "${BASH_SOURCE}" ]]; then \
-   echo "ERROR: Script ${0##*/} must be sourced"; \
-   echo "Usage: source ${0##*/}"; \
-   exit 1; \
-   fi; \
-   this_file=${BASH_SOURCE##*/}; \
-   if [[ -n "${1}" ]]; then \
-      module add intel/${1}; \
-      echo "Expected setup:"; \
-      echo "   intel/${1}"; \
-      module list; \
-   else \
-      printf "Sourcing ${PWD}/tools/toolchain/install/setup ... "; \
-      source ${PWD}/tools/toolchain/install/setup; \
-      printf "done\n"; \
-   fi; \
-   echo "Check the output above for error messages and consistency!"; \
-   echo "If everything is OK, you can build a CP2K production binary with"; \
-   echo "   make -j ARCH=${this_file%%.*} VERSION=${this_file##*.}"; \
-   echo "Alternatively, you can add further checks, e.g. for regression testing, with"; \
-   echo "   make -j ARCH=${this_file%%.*} VERSION=${this_file##*.} DO_CHECKS=yes"; \
-   echo "or build CP2K only with shared libraries using"; \
-   echo "   make -j ARCH=${this_file%%.*} VERSION=${this_file##*.} SHARED=yes"; \
-   echo "or build CP2K as a library with"; \
-   echo "   make -j ARCH=${this_file%%.*} VERSION=${this_file##*.} libcp2k"; \
-   return
-
-# Set options
-DO_CHECKS      := no
-SHARED         := no
-USE_COSMA      := 2.5.1
-USE_ELPA       := 2021.11.001
-USE_LIBINT     := 2.6.0
-USE_LIBVORI    := 210412
-USE_LIBXC      := 5.1.7
-USE_LIBXSMM    := 1.17
-USE_PLUMED     := 2.7.3
-USE_SIRIUS     := 7.3.0
-USE_SPGLIB     := 1.16.2
-# Only needed for SIRIUS
-SPFFT_VER      := 1.0.5
-SPLA_VER       := 1.5.2
-HDF5_VER       := 1.12.0
-
-LMAX           := 5
-MAX_CONTR      := 4
-
-CC             := mpiicc
-FC             := mpiifort
-LD             := mpiifort
-AR             := ar -r
-
-CFLAGS         := -O2 -fopenmp -fp-model precise -funroll-loops -g -qopenmp-simd -traceback -xHost
-
-DFLAGS         := -D__parallel
-DFLAGS         += -D__SCALAPACK
-DFLAGS         += -D__MKL
-DFLAGS         += -D__FFTW3
-DFLAGS         += -D__MPI_VERSION=3
-DFLAGS         += -D__MAX_CONTR=$(strip $(MAX_CONTR))
-
-INSTALL_PATH   := $(PWD)/tools/toolchain/install
-
-MKL_LIB        := $(MKLROOT)/lib/intel64
-
-ifeq ($(SHARED), yes)
-   LD_SHARED      := $(FC) -shared
-   CFLAGS         += -fPIC
-   LDFLAGS        := -Wl,--enable-new-dtags
-   CP2K_LIB       := $(PWD)/lib/$(ARCH)/$(ONEVERSION)
-   LDFLAGS        += -Wl,-rpath=$(CP2K_LIB)
-   LDFLAGS        += -Wl,-rpath=$(CP2K_LIB)/exts/dbcsr
-else
-   LDFLAGS        := -static-intel -static_mpi
-endif
-
-# Settings for regression testing
-ifeq ($(DO_CHECKS), yes)
-   DFLAGS         += -D__CHECK_DIAG
-endif
-
-ifneq ($(USE_PLUMED),)
-   USE_PLUMED     := $(strip $(USE_PLUMED))
-   PLUMED_LIB     := $(INSTALL_PATH)/plumed-$(USE_PLUMED)/lib
-   DFLAGS         += -D__PLUMED2
-   USE_GSL        := 2.7
-   ifeq ($(SHARED), yes)
-      LIBS           += -Wl,-rpath=$(PLUMED_LIB) -L$(PLUMED_LIB) -lplumed -lplumedKernel
-   else
-      LIBS           += $(PLUMED_LIB)/libplumed.a
-   endif
-endif
-
-ifneq ($(USE_ELPA),)
-   USE_ELPA       := $(strip $(USE_ELPA))
-   ELPA_INC       := $(INSTALL_PATH)/elpa-$(USE_ELPA)/cpu/include/elpa_openmp-$(USE_ELPA)
-   ELPA_LIB       := $(INSTALL_PATH)/elpa-$(USE_ELPA)/cpu/lib
-   CFLAGS         += -I$(ELPA_INC)/elpa -I$(ELPA_INC)/modules
-   DFLAGS         += -D__ELPA
-   ifeq ($(SHARED), yes)
-      LIBS           += -Wl,-rpath=$(ELPA_LIB) -L$(ELPA_LIB) -lelpa_openmp
-   else
-      LIBS           += $(ELPA_LIB)/libelpa_openmp.a
-   endif
-endif
-
-ifneq ($(USE_LIBVORI),)
-   USE_LIBVORI    := $(strip $(USE_LIBVORI))
-   LIBVORI_LIB    := $(INSTALL_PATH)/libvori-$(USE_LIBVORI)/lib
-   DFLAGS         += -D__LIBVORI
-   ifeq ($(SHARED), yes)
-      LIBS           += -Wl,-rpath=$(LIBVORI_LIB) -L$(LIBVORI_LIB) -lvori
-   else
-      LIBS           += $(LIBVORI_LIB)/libvori.a
-   endif
-endif
-
-ifneq ($(USE_LIBXC),)
-   USE_LIBXC      := $(strip $(USE_LIBXC))
-   LIBXC_INC      := $(INSTALL_PATH)/libxc-$(USE_LIBXC)/include
-   LIBXC_LIB      := $(INSTALL_PATH)/libxc-$(USE_LIBXC)/lib
-   CFLAGS         += -I$(LIBXC_INC)
-   DFLAGS         += -D__LIBXC
-   ifeq ($(SHARED), yes)
-      LIBS           += -Wl,-rpath=$(LIBXC_LIB) -L$(LIBXC_LIB) -lxcf03 -lxc
-   else
-      LIBS           += $(LIBXC_LIB)/libxcf03.a
-      LIBS           += $(LIBXC_LIB)/libxc.a
-   endif
-endif
-
-ifneq ($(USE_LIBINT),)
-   USE_LIBINT     := $(strip $(USE_LIBINT))
-   LMAX           := $(strip $(LMAX))
-   LIBINT_INC     := $(INSTALL_PATH)/libint-v$(USE_LIBINT)-cp2k-lmax-$(LMAX)/include
-   LIBINT_LIB     := $(INSTALL_PATH)/libint-v$(USE_LIBINT)-cp2k-lmax-$(LMAX)/lib
-   CFLAGS         += -I$(LIBINT_INC)
-   DFLAGS         += -D__LIBINT
-   ifeq ($(SHARED), yes)
-      LIBS           += -Wl,-rpath=$(LIBINT_LIB) -L$(LIBINT_LIB) -lint2
-   else
-      LIBS           += $(LIBINT_LIB)/libint2.a
-      LIBS           += $(LIBINT_LIB)/libint2.a
-   endif
-endif
-
-ifneq ($(USE_SPGLIB),)
-   USE_SPGLIB     := $(strip $(USE_SPGLIB))
-   SPGLIB_INC     := $(INSTALL_PATH)/spglib-$(USE_SPGLIB)/include
-   SPGLIB_LIB     := $(INSTALL_PATH)/spglib-$(USE_SPGLIB)/lib
-   CFLAGS         += -I$(SPGLIB_INC)
-   DFLAGS         += -D__SPGLIB
-   ifeq ($(SHARED), yes)
-      LIBS           += -Wl,-rpath=$(SPGLIB_LIB) -L$(SPGLIB_LIB) -lsymspg
-   else
-      LIBS           += $(SPGLIB_LIB)/libsymspg.a
-   endif
-endif
-
-ifneq ($(USE_LIBXSMM),)
-   USE_LIBXSMM    := $(strip $(USE_LIBXSMM))
-   LIBXSMM_INC    := $(INSTALL_PATH)/libxsmm-$(USE_LIBXSMM)/include
-   LIBXSMM_LIB    := $(INSTALL_PATH)/libxsmm-$(USE_LIBXSMM)/lib
-   CFLAGS         += -I$(LIBXSMM_INC)
-   DFLAGS         += -D__LIBXSMM
-   ifeq ($(SHARED), yes)
-      LIBS           += -Wl,-rpath=$(LIBXSMM_LIB) -L$(LIBXSMM_LIB) -lxsmmf -lxsmm
-   else
-      LIBS           += $(LIBXSMM_LIB)/libxsmmf.a
-      LIBS           += $(LIBXSMM_LIB)/libxsmm.a
-   endif
-endif
-
-ifneq ($(USE_SIRIUS),)
-   USE_SIRIUS     := $(strip $(USE_SIRIUS))
-   SIRIUS_INC     := $(INSTALL_PATH)/sirius-$(USE_SIRIUS)/include
-   SIRIUS_LIB     := $(INSTALL_PATH)/sirius-$(USE_SIRIUS)/lib
-   SPFFT_LIB      := $(INSTALL_PATH)/SpFFT-$(SPFFT_VER)/lib
-   SPLA_LIB       := $(INSTALL_PATH)/SpLA-$(SPLA_VER)/lib
-   HDF5_LIB       := $(INSTALL_PATH)/hdf5-$(HDF5_VER)/lib
-   CFLAGS         += -I$(SIRIUS_INC)
-   DFLAGS         += -D__SPFFT
-   DFLAGS         += -D__SPLA
-   DFLAGS         += -D__HDF5
-   DFLAGS         += -D__SIRIUS
-   ifeq ($(SHARED), yes)
-      LIBS           += -Wl,-rpath=$(SIRIUS_LIB) -L$(SIRIUS_LIB) -lsirius
-      LIBS           += -Wl,-rpath=$(SPFFT_LIB) -L$(SPFFT_LIB) -lspfft
-      LIBS           += -Wl,-rpath=$(SPLA_LIB) -L$(SPLA_LIB) -lspla
-      LIBS           += -Wl,-rpath=$(HDF5_LIB) -L$(HDF5_LIB) -lhdf5
-   else
-      LIBS           += $(SIRIUS_LIB)/libsirius.a
-      LIBS           += $(SPFFT_LIB)/libspfft.a
-      LIBS           += $(SPLA_LIB)/libspla.a
-      LIBS           += $(HDF5_LIB)/libhdf5.a
-   endif
-endif
-
-ifneq ($(USE_COSMA),)
-   USE_COSMA      := $(strip $(USE_COSMA))
-   COSMA_INC      := $(INSTALL_PATH)/COSMA-$(USE_COSMA)/include
-   COSMA_LIB      := $(INSTALL_PATH)/COSMA-$(USE_COSMA)/lib
-   CFLAGS         += -I$(COSMA_INC)
-   DFLAGS         += -D__COSMA
-   ifeq ($(SHARED), yes)
-      LIBS           += -Wl,-rpath=$(COSMA_LIB) -L$(COSMA_LIB) -lcosma_prefixed_pxgemm -lcosma -lcosta_prefixed_scalapack -lcosta
-   else
-      LIBS           += $(COSMA_LIB)/libcosma_prefixed_pxgemm.a
-      LIBS           += $(COSMA_LIB)/libcosma.a
-      LIBS           += $(COSMA_LIB)/libcosta_prefixed_scalapack.a
-      LIBS           += $(COSMA_LIB)/libcosta.a
-   endif
-endif
-
-ifeq ($(SHARED), yes)
-   LIBS           += -Wl,-rpath=$(MKL_LIB) -L$(MKL_LIB) -lbmkl_scalapack_lp64
-   LIBS           += -Wl,--start-group
-   LIBS           += -lmkl_intel_lp64
-   LIBS           += -lmkl_sequential
-   LIBS           += -lmkl_core
-   LIBS           += -lmkl_blacs_intelmpi_lp64
-   LIBS           += -Wl,--end-group
-else
-   LIBS           += $(MKL_LIB)/libmkl_scalapack_lp64.a
-   LIBS           += -Wl,--start-group
-   LIBS           += $(MKL_LIB)/libmkl_intel_lp64.a
-   LIBS           += $(MKL_LIB)/libmkl_sequential.a
-   LIBS           += $(MKL_LIB)/libmkl_core.a
-   LIBS           += $(MKL_LIB)/libmkl_blacs_intelmpi_lp64.a
-   LIBS           += -Wl,--end-group
-endif
-
-ifneq ($(USE_GSL),)
-   USE_GSL        := $(strip $(USE_GSL))
-   GSL_INC        := $(INSTALL_PATH)/gsl-$(USE_GSL)/include
-   GSL_LIB        := $(INSTALL_PATH)/gsl-$(USE_GSL)/lib
-   CFLAGS         += -I$(GSL_INC)
-   DFLAGS         += -D__GSL
-   ifeq ($(SHARED), yes)
-      LIBS           += -Wl,-rpath=$(GSL_LIB) -L$(GSL_LIB) -lgsl
-   else
-      LIBS           += $(GSL_LIB)/libgsl.a
-   endif
-endif
-
-CFLAGS         += $(DFLAGS)
-CFLAGS         += -I$(MKLROOT)/include
-CFLAGS         += -I$(MKLROOT)/include/fftw
-
-FCFLAGS        := $(CFLAGS)
-FCFLAGS        += -diag-disable=8291
-FCFLAGS        += -diag-disable=8293
-FCFLAGS        += -fpp
-FCFLAGS        += -free
+# Tested with: Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.5.274 Build 20180823
+#              Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.1.217 Build 20200306
+#              Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925
+#              Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.1 Build 20201112
+#              Intel MPI, MKL
+# Author: Matthias Krack (matthias.krack@psi.ch, PSI, September 2021)
+
+LIBXSMM  = $(EBROOTLIBXSMM)
+LIBXC    = $(EBROOTLIBXC)
+LIBINT   = $(EBROOTLIBINT)
+LIBELPA  = $(EBROOTELPA)
+LIBPLUMED= $(EBROOTPLUMED)
+
+CC        = mpiicc
+FC        = mpiifort
+LD        = mpiifort
+AR        = ar -r
+
+CFLAGS    = -O2 -fopenmp -fp-model precise -funroll-loops -g -qopenmp-simd -traceback -march=core-avx2
+
+DFLAGS    = -D__FFTW3
+DFLAGS   += -D__MAX_CONTR=4
+DFLAGS   += -D__MKL
+DFLAGS   += -D__MPI_VERSION=3
+DFLAGS   += -D__parallel
+DFLAGS   += -D__SCALAPACK
+
+DFLAGS   += -D__ELPA
+DFLAGS   += -D__LIBXC
+DFLAGS   += -D__LIBINT
+DFLAGS   += -D__PLUMED2
+
+FCFLAGS   = $(CFLAGS) $(DFLAGS)
+FCFLAGS  += -diag-disable=8291
+FCFLAGS  += -diag-disable=8293
+FCFLAGS  += -fpp
+FCFLAGS  += -free
+FCFLAGS  += -I$(MKLROOT)/include
+FCFLAGS  += -I$(MKLROOT)/include/fftw
+
+FCFLAGS  += -I$(LIBXSMM)/include
+FCFLAGS  += -I$(LIBXC)/include
+FCFLAGS  += -I$(LIBELPA)/include/elpa_openmp-$(EBVERSIONELPA)/modules -I$(LIBELPA)/include/elpa_openmp-$(EBVERSIONELPA)/elpa
+FCFLAGS  += -I$(LIBPLUMED)/include
+
+LDFLAGS   = $(FCFLAGS) -static-intel -static_mpi
+LDFLAGS_C = -nofor-main
+
+LIBS      = -L$(LIBELPA)/lib -lelpa_openmp
+LIBS     += -L$(LIBXSMM)/lib -lxsmmf -lxsmm -ldl
+LIBS     += -L$(LIBXC)/lib -lxcf03 -lxc
+LIBS     += -L$(LIBINT)/lib -lint2 -lstdc++
+LIBS     += -L$(LIBPLUMED) -lplumed -lplumedKernel
+
+MKL_LIB   = $(MKLROOT)/lib/intel64
+LIBS     += $(MKL_LIB)/libmkl_scalapack_lp64.a
+LIBS     += -Wl,--start-group
+LIBS     += $(MKL_LIB)/libmkl_intel_lp64.a
+LIBS     += $(MKL_LIB)/libmkl_sequential.a
+LIBS     += $(MKL_LIB)/libmkl_core.a
+LIBS     += $(MKL_LIB)/libmkl_blacs_intelmpi_lp64.a
+LIBS     += -Wl,--end-group
 
-LDFLAGS        += $(FCFLAGS)
-LDFLAGS_C      := -nofor-main
-
-LIBS           += -lz -lstdc++
+LIBS     += -lpthread -lm
 
 # Required due to memory leak that occurs if high optimisations are used
 mp2_optimize_ri_basis.o: mp2_optimize_ri_basis.F
 	$(FC) -c $(subst O2,O0,$(FCFLAGS)) $<
-
-# End
