# original AVX and AVX2 tests in FindAVXwere passed by icc compiler, the new code works
# well for both gcc and icc
# May 11th 2018 by B. Hajgato (Free Univeristy Brussles - VUB)
# Ported to PyTorch 0.4.1 by Kenneth Hoste (HPC-UGent)
# Added support for using Intel-specific compiler options rather than the GNU ones.
# Ported to PyTorch 1.0.0 by Kurt Lust (VSC/UAntwerp)
--- pytorch-1.0.0.orig/cmake/Modules/FindAVX.cmake	2019-01-09 15:26:15.156881000 +0100
+++ pytorch-1.0.0/cmake/Modules/FindAVX.cmake	2019-01-17 13:58:37.264318000 +0100
@@ -6,8 +6,18 @@
 
   int main()
   {
-    __m256 a;
-    a = _mm256_set1_ps(0);
+    __m256 a, b, c;
+    const float src[8] = { 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f };
+    float dst[8];
+    a = _mm256_loadu_ps( src );
+    b = _mm256_loadu_ps( src );
+    c = _mm256_add_ps( a, b );
+    _mm256_storeu_ps( dst, c );
+    for( int i = 0; i < 8; i++ ){
+      if( ( src[i] + src[i] ) != dst[i] ){
+        return -1;
+      }
+    }
     return 0;
   }
 ")
@@ -17,8 +27,18 @@
 
   int main()
   {
-    __m256i a = {0};
-    a = _mm256_abs_epi16(a);
+    __m256i a, b, c;
+    const int src[8] = { 1, 2, 3, 4, 5, 6, 7, 8 };
+    int dst[8];
+    a =  _mm256_loadu_si256( (__m256i*)src );
+    b =  _mm256_loadu_si256( (__m256i*)src );
+    c = _mm256_add_epi32( a, b );
+    _mm256_storeu_si256( (__m256i*)dst, c );
+    for( int i = 0; i < 8; i++ ){
+      if( ( src[i] + src[i] ) != dst[i] ){
+        return -1;
+      }
+    }
     return 0;
   }
 ")
@@ -52,8 +72,19 @@
 
 ENDMACRO()
 
-CHECK_SSE(C "AVX" " ;-mavx;/arch:AVX")
-CHECK_SSE(C "AVX2" " ;-mavx2 -mfma;/arch:AVX2")
-
-CHECK_SSE(CXX "AVX" " ;-mavx;/arch:AVX")
-CHECK_SSE(CXX "AVX2" " ;-mavx2 -mfma;/arch:AVX2")
+IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
+  CHECK_SSE(C "AVX" " ;-mavx;-march=core-avx;/arch:AVX")
+  CHECK_SSE(C "AVX2" " ;-mavx2 -mfma;-march=core-avx2;/arch:AVX2")
+  CHECK_SSE(CXX "AVX" " ;-mavx;-march=core-avx;/arch:AVX")
+  CHECK_SSE(CXX "AVX2" " ;-mavx2 -mfma;-march=core-avx2;/arch:AVX2")
+ELSEIF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
+  CHECK_SSE(C "AVX" " ;-march=core-avx")
+  CHECK_SSE(C "AVX2" " ;-march=core-avx2")
+  CHECK_SSE(CXX "AVX" " ;-march=core-avx")
+  CHECK_SSE(CXX "AVX2" " ;-march=core-avx2")
+ELSE()
+  CHECK_SSE(C "AVX" " ;-mavx;/arch:AVX")
+  CHECK_SSE(C "AVX2" " ;-mavx2 -mfma;/arch:AVX2")
+  CHECK_SSE(CXX "AVX" " ;-mavx;/arch:AVX")
+  CHECK_SSE(CXX "AVX2" " ;-mavx2 -mfma;/arch:AVX2")
+ENDIF()
--- pytorch-1.0.0.orig/cmake/Codegen.cmake	2019-01-09 15:26:15.044536000 +0100
+++ pytorch-1.0.0/cmake/Codegen.cmake	2019-01-17 13:40:54.174764000 +0100
@@ -89,9 +89,11 @@
     LIST(APPEND CPU_CAPABILITY_NAMES "AVX")
     IF(MSVC)
       LIST(APPEND CPU_CAPABILITY_FLAGS "${OPT_FLAG}/arch:AVX")
+    ELSEIF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
+      LIST(APPEND CPU_CAPABILITY_FLAGS "${OPT_FLAG} -mavx")
     ELSE(MSVC)
       LIST(APPEND CPU_CAPABILITY_FLAGS "${OPT_FLAG} -mavx")
-    ENDIF(MSVC)
+    ENDIF()
   ENDIF(CXX_AVX_FOUND)
 
   IF(CXX_AVX2_FOUND)
@@ -99,6 +101,8 @@
     LIST(APPEND CPU_CAPABILITY_NAMES "AVX2")
     IF(MSVC)
       LIST(APPEND CPU_CAPABILITY_FLAGS "${OPT_FLAG}/arch:AVX2")
+    ELSEIF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
+      LIST(APPEND CPU_CAPABILITY_FLAGS "${OPT_FLAG} -march=core-avx2")
     ELSE(MSVC)
       LIST(APPEND CPU_CAPABILITY_FLAGS "${OPT_FLAG} -mavx2 -mfma")
     ENDIF(MSVC)
--- pytorch-1.0.0.orig/cmake/MiscCheck.cmake	2019-01-09 15:26:14.939398000 +0100
+++ pytorch-1.0.0/cmake/MiscCheck.cmake	2019-01-17 13:38:36.740402783 +0100
@@ -157,7 +157,10 @@
 cmake_push_check_state(RESET)
 if (MSVC)
   set(CMAKE_REQUIRED_FLAGS "/arch:AVX2")
+elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
+  set(CMAKE_REQUIRED_FLAGS "-march=core-avx2")
 else()
+  # Assume the default GNU option for avx2.
   set(CMAKE_REQUIRED_FLAGS "-mavx2")
 endif()
 CHECK_CXX_SOURCE_COMPILES(
@@ -186,6 +189,8 @@
 cmake_push_check_state(RESET)
 if (MSVC)
   set(CMAKE_REQUIRED_FLAGS "/D__AVX512F__")
+elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
+  set(CMAKE_REQUIRED_FLAGS "-xCOMMON-AVX512")
 else()
   set(CMAKE_REQUIRED_FLAGS "-mavx512f")
 endif()
