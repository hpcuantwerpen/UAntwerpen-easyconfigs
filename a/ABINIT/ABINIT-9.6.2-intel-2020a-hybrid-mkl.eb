easyblock = 'ConfigureMake'

local_buildset =         '2020a'

local_libxc_version =          '4.3.4'           # https://www.tddft.org/programs/libxc/download/
local_netCDF_version =         '4.7.3'           # https://www.unidata.ucar.edu/software/netcdf/

import os as local_os
local_UAcluster = local_os.environ['VSC_INSTITUTE_CLUSTER']


name =          'ABINIT'
version =       '9.6.2'
versionsuffix = '-hybrid-mkl'

homepage = 'http://www.abinit.org/'
whatis = [
    "Description: ABINIT is DFT-based software to caluclate optical, mechanical, vibrational, and other observable properties of materials",
    "This package provides a hybrid OpenMP/MPI executable",
]

description = """
ABINIT is a software suite to calculate the optical,
mechanical, vibrational, and other observable properties of materials.
Starting from the quantum equations of density functional theory, you can build
up to advanced applications with perturbation theories based on DFT, and
many-body Green's functions (GW and DMFT) .

ABINIT can calculate molecules, nanostructures and solids with any chemical
composition, and comes with several complete and robust tables of atomic
potentials.

On-line tutorials are available for the main features of the code, and several
schools and workshops are organized each year.

This module provides a hybrid OpenMP/MPI executable. It is build using 
8-byte integers and flags for large system support, and includes support
for netCDF, AtomPAW, LibXC functionals and Wannier90.

"""

toolchain = {'name': 'intel', 'version': local_buildset}
toolchainopts = {'i8': True}

# File: https://www.abinit.org/sites/default/files/packages/abinit-9.0.4.tar.gz
source_urls = [ 'https://www.abinit.org/sites/default/files/packages/' ]

sources = [ SOURCELOWER_TAR_GZ ]

dependencies = [
    ('netCDF',    local_netCDF_version, '-MPI'),
    ('Wannier90', '2.0.1.1',            '-ABINIT'),
    ('libxc',     local_libxc_version),
]

if local_UAcluster == 'vaughan':
    dependencies += [ ('MKL-overlay', '2018.04', '', True )]

# https://docs.abinit.org/developers/autoconf_examples
# https://github.com/abinit/abiconfig/blob/master/abiconfig/clusters

preconfigopts  = 'export CC=mpiicc && export CXX=mpiicpc && export CPP="mpiicc -P"  && export FC=mpiifort && '
if local_UAcluster == 'vaughan':
    preconfigopts += 'export FCFLAGS="-O2 -march=core-avx2 -mtune=core-avx2 -ftz -fp-speculation=safe -fp-model source  -noaltparam -nofpscomp -mcmodel=large -shared-intel" && '
    preconfigopts += 'export CFLAGS="-O2 -march=core-avx2 -mtune=core-avx2 -ftz -fp-speculation=safe -fp-model source -DMKL_ILP64" && '
    preconfigopts += 'export CXXFLAGS="-O2 -march=core-avx2 -mtune=core-avx2 -ftz -fp-speculation=safe -fp-model source" && '
else:
    preconfigopts += 'export FCFLAGS="-O2 -xHost -ftz -fp-speculation=safe -fp-model source  -noaltparam -nofpscomp -mcmodel=large -shared-intel" && '
preconfigopts += 'export LINALG_CPPFLAGS="-I${MKLROOT}/include" && '
preconfigopts += 'export LINALG_FCFLAGS="-I${MKLROOT}/include" && '
preconfigopts += 'export LINALG_LIBS="-L${MKLROOT}/lib/intel64 -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -lpthread -lm -ldl" && '

patches = [
    'ABINIT-9.0.4_configure_intel.patch'
]

configopts = ""
configopts += '--with-fallbacks '
configopts += '--with-mpi="$EBROOTIMPI/intel64" '
configopts += '--enable-mpi-io=yes '
configopts += '--enable-openmp="yes" '
configopts += '--with-fc-vendor=intel '
configopts += '--with-linalg-flavor="mkl" '
configopts += '--with-fft_flavor="dfti" '
configopts += '--with-netcdf=$EBROOTNETCDF '
configopts += '--with-netcdf-fortran=$EBROOTNETCDF '
configopts += '--with-hdf5=$EBROOTHDF5 '
configopts += '--with-libxc=$EBROOTLIBXC '
configopts += '--with-wannier90=$EBROOTWANNIER90 '
configopts += '--enable-gw-dpc=yes '
configopts += '--enable-avx-safe-mode '      # see https://forum.abinit.org/viewtopic.php?f=9&t=4028

sanity_check_paths = {
    'files': ['bin/%s' % x for x in ['abinit', 'aim', 'cut3d', 'conducti', 'mrgddb', 'mrgscr', 'optic']],
    'dirs':  ['lib/pkgconfig'],
}

moduleclass = 'chem'
